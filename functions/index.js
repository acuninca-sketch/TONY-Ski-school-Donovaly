const functions = require("firebase-functions");
const admin = require("firebase-admin");

admin.initializeApp();
const db = admin.firestore();

// UID superadmina (ten ƒço m√° pln√∫ kontrolu)
const SUPERADMIN_UID = "qVb759slUae8j0rAsnqGxd2SZG72";

/**
 * Inicializ√°cia superadmina pri deployi
 */
exports.initSuperAdmin = functions.https.onCall(async (data, context) => {
  try {
    await admin.auth().setCustomUserClaims(SUPERADMIN_UID, { superadmin: true, admin: true });

    await db.collection("roles").doc(SUPERADMIN_UID).set({
      role: "superadmin",
      createdAt: admin.firestore.FieldValue.serverTimestamp()
    });

    return { message: "Superadmin √∫spe≈°ne inicializovan√Ω üöÄ" };
  } catch (err) {
    console.error(err);
    throw new functions.https.HttpsError("internal", "Chyba pri inicializ√°cii superadmina");
  }
});

/**
 * Pridanie admina ‚Äì m√¥≈æe vola≈• len superadmin
 */
exports.addAdmin = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Mus√≠≈° by≈• prihl√°sen√Ω.");

  const uid = context.auth.uid;
  const roleDoc = await db.collection("roles").doc(uid).get();
  if (!roleDoc.exists || roleDoc.data().role !== "superadmin") {
    throw new functions.https.HttpsError("permission-denied", "Len superadmin m√¥≈æe spravova≈• adminov.");
  }

  const { adminUid } = data;
  if (!adminUid) throw new functions.https.HttpsError("invalid-argument", "Ch√Ωba UID admina.");

  await admin.auth().setCustomUserClaims(adminUid, { admin: true });
  await db.collection("roles").doc(adminUid).set({
    role: "admin",
    createdAt: admin.firestore.FieldValue.serverTimestamp()
  });

  return { message: `Pou≈æ√≠vateƒæ ${adminUid} bol pridan√Ω ako admin.` };
});

/**
 * Odobratie admina ‚Äì m√¥≈æe vola≈• len superadmin
 */
exports.removeAdmin = functions.https.onCall(async (data, context) => {
  if (!context.auth) throw new functions.https.HttpsError("unauthenticated", "Mus√≠≈° by≈• prihl√°sen√Ω.");

  const uid = context.auth.uid;
  const roleDoc = await db.collection("roles").doc(uid).get();
  if (!roleDoc.exists || roleDoc.data().role !== "superadmin") {
    throw new functions.https.HttpsError("permission-denied", "Len superadmin m√¥≈æe spravova≈• adminov.");
  }

  const { adminUid } = data;
  if (!adminUid) throw new functions.https.HttpsError("invalid-argument", "Ch√Ωba UID admina.");

  await admin.auth().setCustomUserClaims(adminUid, { admin: false });
  await db.collection("roles").doc(adminUid).delete();

  return { message: `Pou≈æ√≠vateƒæ ${adminUid} u≈æ nie je admin.` };
});

/**
 * Nastavenie ≈°portov√©ho re≈æimu ‚Äì m√¥≈æe vola≈• len admin
 */
exports.setSportMode = functions.https.onCall(async (data, context) => {
  if (!context.auth || !context.auth.token.admin) {
    throw new functions.https.HttpsError("permission-denied", "Len admin m√¥≈æe meni≈• ≈°portov√Ω re≈æim.");
  }

  await db.collection("settings").doc("sportAvailability").set({
    mode: data.mode,
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  });

  return { message: "Re≈æim nastaven√Ω na: " + data.mode };
});
